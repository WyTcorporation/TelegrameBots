import re

import emoji
from aiogram import Bot
from aiogram.filters import CommandObject, CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.deep_linking import decode_payload
from LightOnOff.core.Keyboards.StepsKb import kbGetAreas, kbGetCities, refreshButtons
from LightOnOff.core.Keyboards.TextButtonsKb import getButtonFullName
from LightOnOff.core.other.Request import Request
from LightOnOff.core.other.States import States


async def getName(message: Message, command: CommandObject, state: FSMContext, request: Request):
    print(message.from_user.language_code)
    print(command.args)
    print(message.get_url())
    # payload = decode_payload(args)
    # print(payload)
    await message.answer(
        '–ü—Ä–∏–≤—ñ—Ç, –Ø –ø–æ–º—ñ—á–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó –ï–ª–µ–∫—Ç—Ä–æ –£–∫—Ä–∞—ó–Ω–∞. –í –Ω–∞—Å –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —á–∏ —î —Å–≤—ñ—Ç–ª–æ! –Ø–∫ —è –º–æ–∂—É –¥–æ –í–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?',
        reply_markup=await getButtonFullName(message.from_user.full_name))
    await state.set_state(States.stateFullName)
    await request.dbAddUser(message.from_user.id,
                            message.from_user.first_name,
                            message.from_user.last_name,
                            message.from_user.last_name,
                            message.from_user.username)


async def getHelp(message: Message, state: FSMContext, request: Request):
    await message.answer(
        '–ü—Ä–∏–≤—ñ—Ç, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—å –ø–æ –ø–æ—á—Ç—ñ wild.savedo@gmail.com –∞–±–æ @wytcorp',
        reply_markup=None)
    await request.dbAddUser(message.from_user.id,
                            message.from_user.first_name,
                            message.from_user.last_name,
                            message.from_user.last_name,
                            message.from_user.username)


async def getAreas(message: Message, state: FSMContext, request: Request):
    await message.answer(f'–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è {message.text}, –≤–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –æ–±–ª–∞—Å—Ç—å: ',
                         reply_markup=await kbGetAreas(request))
    await state.update_data(fullName=message.text)
    await state.set_state(States.stateArea)


async def getCity(call: CallbackQuery, state: FSMContext):
    dateArea = call.data.split('=')[1]
    await call.message.edit_text(f'–¢–µ–ø–µ—Ä –±—É–¥—å-–ª–∞—Å–∫–∞ –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ \r\n (—Ü–µ –¥–µ–º–æ, —Ç–æ–º—É –æ–±–ª–∞—Å–Ω–∏–π —Ü–µ–Ω—Ç—Ä):')
    await state.update_data(area=dateArea)
    await state.set_state(States.stateCityText)


async def searchCity(message: Message, state: FSMContext, request: Request):
    city = message.text
    data = await state.get_data()
    area = data['area']
    areaId = area.split('|')[0]
    db = await request.dbGetCity(areaId, city)
    if len(db) > 0:
        await message.answer(f'–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑ –Ω–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ: ',
                             reply_markup=await kbGetCities(request, db))
        await state.update_data(cityText=city)
        await state.set_state(States.stateCity)
    else:
        await message.answer(f'–í–∏–±–∞—á—Ç–µ —Ç–∞–∫–æ–≥–æ –º—ñ—Å—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑!')


async def getStreet(call: CallbackQuery, state: FSMContext):
    dateCity = call.data.split('=')[1]
    await call.message.edit_text(
        # f'–î—è–∫—É—é, –æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–≥. –í–≤–µ–¥—ñ—Ç—å –≤—É–ª–∏—Ü—é —Ç–∞ –±—É–¥–∏–Ω–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É \r\n (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –•—Ä–µ—â–∞—Ç–∏–∫, 22):' + emoji.emojize(":brain:"))
        f'–î—è–∫—É—é, –æ—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–≥. –í–≤–µ–¥—ñ—Ç—å –≤—É–ª–∏—Ü—é —Ç–∞ –±—É–¥–∏–Ω–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É \r\n (–ù–∞–ø—Ä–∏–∫–ª–∞–¥: –•—Ä–µ—â–∞—Ç–∏–∫, 22):')
    await state.update_data(city=dateCity)
    await state.set_state(States.stateStatus)


async def results(message: Message, state: FSMContext, request: Request):
    street = message.text
    # –¢—É—Ç –∫–æ–¥ –ø–æ—à—É–∫—É –ø–æ –≤—É–ª–∏—Ü—è—Ö —ñ —Å—Ç–∞—Ç—É—Å—É —î —Å–≤—ñ—Ç–ª–æ —á–∏ –Ω—ñ
    # –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é IP-–∞–¥—Ä–µ—Å–∏ –±–æ—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —Ä–æ—É—Ç–µ—Ä –¥–æ –º–µ—Ä–µ–∂—ñ.
    # –Ø–∫—â–æ –Ω—ñ, –∑–Ω–∞—á–∏—Ç—å –µ–ª–µ–∫—Ç—Ä–∏–∫–∏ —É —Ü—å–æ–º—É –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—ñ –Ω–µ–º–∞—î.
    # –°–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∞–±–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ IP
    data = await state.get_data()
    area = data['area'].split('|')[1]
    city = data['city'].split('|')[1]
    await message.answer(
        f'–ó–∞ –∞–¥—Ä–µ—Å–æ—é {area} - {city} - {street}\r\n\r\n–ù–∞ –¥–∞–Ω–Ω–∏–π –º–æ–º–µ–Ω—Ç —Å–≤—ñ—Ç–ª–æ —î, —â–∞—Å–ª–∏–≤–∞ –ª—é–¥–∏–Ω–∞!\r\n\r\nüá∫üá¶ –í—Å–µ –±—É–¥–µ –£–∫—Ä–∞—ó–Ω–∞!',
        reply_markup=await refreshButtons())
    await state.update_data(street=street)


async def update(call: CallbackQuery, state: FSMContext):
    # –¢—É—Ç –∫–æ–¥ –ø–æ—à—É–∫—É –ø–æ –≤—É–ª–∏—Ü—è—Ö —ñ —Å—Ç–∞—Ç—É—Å—É —î —Å–≤—ñ—Ç–ª–æ —á–∏ –Ω—ñ
    # –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é IP-–∞–¥—Ä–µ—Å–∏ –±–æ—Ç –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏–π —Ä–æ—É—Ç–µ—Ä –¥–æ –º–µ—Ä–µ–∂—ñ.
    # –Ø–∫—â–æ –Ω—ñ, –∑–Ω–∞—á–∏—Ç—å –µ–ª–µ–∫—Ç—Ä–∏–∫–∏ —É —Ü—å–æ–º—É –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—ñ –Ω–µ–º–∞—î.
    # –°–µ—Ä–≤—ñ—Å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏–º–µ –∑–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ –∞–±–æ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ IP
    typeAnswer = call.data.split('=')[1]
    print(typeAnswer)
    data = await state.get_data()
    area = data['area'].split('|')[1]
    city = data['city'].split('|')[1]
    street = data['street']

    if typeAnswer != 0:
        text = f'C–≤—ñ—Ç–ª–∞ –Ω–µ–º–∞—î, –Ω–∞–∂–∞–ª—å!'
        number = 0
    else:
        text = f'C–≤—ñ—Ç–ª–æ —î, —â–∞—Å–ª–∏–≤–∞ –ª—é–¥–∏–Ω–∞!'
        number = 1
    await call.message.edit_text('–û–Ω–æ–≤–ª–µ–Ω–Ω—è', reply_markup=None)
    await call.message.edit_text(f'–ó–∞ –∞–¥—Ä–µ—Å–æ—é\r\n{area} - {city} - {street}\r\n\r\n{text}\r\n\r\nüá∫üá¶ –í—Å–µ –±—É–¥–µ –£–∫—Ä–∞—ó–Ω–∞!',
                                 reply_markup=await refreshButtons(number))


async def restart(call: CallbackQuery, state: FSMContext, bot: Bot):
    await state.clear()
    await call.message.edit_text(f'–©–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ –Ω–∞–ø–∏—à—ñ—Ç—å /start –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –º–µ–Ω—é', reply_markup=None)
